import { afterNextRender, computed, Directive, ElementRef, HostBinding, inject, Input, signal } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { IconSetService } from '../icon-set';
import { transformName } from './icon.utils';
import * as i0 from "@angular/core";
export class IconDirective {
    #elementRef;
    #sanitizer;
    #iconSet;
    constructor() {
        this.#elementRef = inject(ElementRef);
        this.#sanitizer = inject(DomSanitizer);
        this.#iconSet = inject(IconSetService);
        this.#content = signal('');
        this.size = '';
        this.#name = signal('');
        this.ariaHidden = true;
        this.xmlns = 'http://www.w3.org/2000/svg';
        this.pointerEvents = 'none';
        this.role = 'img';
        this.innerHtml = computed(() => {
            const code = Array.isArray(this.code()) ? (this.code()[1] ?? this.code()[0] ?? '') : this.code() || '';
            // todo proper sanitize
            // const sanitized = this.sanitizer.sanitize(SecurityContext.HTML, code);
            return this.#sanitizer.bypassSecurityTrustHtml(this.titleCode + code || '');
        });
        this.code = computed(() => {
            if (this.#content()) {
                return this.#content();
            }
            if (this.#iconSet && this.#name()) {
                return this.#iconSet.getIcon(this.#name());
            }
            if (this.#name() && !this.#iconSet?.icons[this.#name()]) {
                console.warn(`cIcon directive: The '${this.#name()}' icon not found. Add it to the IconSet service for use with the 'name' property. \n`, this.#name());
            }
            return '';
        });
        this.scale = computed(() => {
            return Array.isArray(this.code()) && (this.code()?.length ?? 0) > 1 ? `0 0 ${this.code()?.[0]}` : '0 0 64 64';
        });
        afterNextRender({
            write: () => {
                this.#elementRef.nativeElement.innerHTML = this.innerHtml();
            }
        });
    }
    set content(value) {
        this.#content.set(value);
    }
    #content;
    set name(value) {
        this.#name.set(value);
    }
    get name() {
        return this.#name();
    }
    #name;
    set viewBox(viewBox) {
        this._viewBox = viewBox;
    }
    get viewBox() {
        return this._viewBox ?? this.scale();
    }
    get hostClasses() {
        return this.computedClasses;
    }
    get titleCode() {
        return this.title ? `<title>${this.title}</title>` : '';
    }
    get computedSize() {
        const addCustom = !this.size && (this.width || this.height);
        return this.size === 'custom' || addCustom ? 'custom-size' : this.size;
    }
    get computedClasses() {
        const classes = {
            icon: true,
            [`icon-${this.computedSize}`]: !!this.computedSize
        };
        return this.customClasses ?? classes;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: IconDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "18.2.9", type: IconDirective, isStandalone: true, selector: "svg[cIcon]", inputs: { content: ["cIcon", "content"], customClasses: "customClasses", size: "size", title: "title", height: "height", width: "width", name: ["name", "name", transformName], viewBox: "viewBox", xmlns: "xmlns", pointerEvents: ["pointer-events", "pointerEvents"], role: "role" }, host: { attributes: { "ngSkipHydration": "true" }, properties: { "innerHtml": "innerHtml()", "attr.viewBox": "this.viewBox", "attr.aria-hidden": "this.ariaHidden", "attr.xmlns": "this.xmlns", "attr.pointer-events": "this.pointerEvents", "attr.role": "this.role", "class": "this.hostClasses" } }, exportAs: ["cIcon"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: IconDirective, decorators: [{
            type: Directive,
            args: [{
                    exportAs: 'cIcon',
                    selector: 'svg[cIcon]',
                    standalone: true,
                    host: { ngSkipHydration: 'true', '[innerHtml]': 'innerHtml()' }
                }]
        }], ctorParameters: () => [], propDecorators: { content: [{
                type: Input,
                args: ['cIcon']
            }], customClasses: [{
                type: Input
            }], size: [{
                type: Input
            }], title: [{
                type: Input
            }], height: [{
                type: Input
            }], width: [{
                type: Input
            }], name: [{
                type: Input,
                args: [{ transform: transformName }]
            }], viewBox: [{
                type: HostBinding,
                args: ['attr.viewBox']
            }, {
                type: Input
            }], ariaHidden: [{
                type: HostBinding,
                args: ['attr.aria-hidden']
            }], xmlns: [{
                type: HostBinding,
                args: ['attr.xmlns']
            }, {
                type: Input
            }], pointerEvents: [{
                type: HostBinding,
                args: ['attr.pointer-events']
            }, {
                type: Input,
                args: ['pointer-events']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }, {
                type: Input
            }], hostClasses: [{
                type: HostBinding,
                args: ['class']
            }] } });
//# sourceMappingURL=data:application/json;base64,