import { OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare class CollapseDirective implements OnDestroy {
    #private;
    /**
     * @ignore
     */
    readonly animateInput: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly animate: import("@angular/core").WritableSignal<boolean>;
    readonly animateInputEffect: import("@angular/core").EffectRef;
    /**
     * Set horizontal collapsing to transition the width instead of height.
     * @type boolean
     * @default false
     */
    readonly horizontal: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    /**
     * Toggle the visibility of collapsible element.
     * @type boolean
     * @default false
     */
    readonly visibleInput: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly visibleChange: import("@angular/core").OutputEmitterRef<boolean>;
    readonly visibleInputEffect: import("@angular/core").EffectRef;
    readonly visible: import("@angular/core").WritableSignal<boolean>;
    readonly visibleEffect: import("@angular/core").EffectRef;
    /**
     * Add `navbar` prop for grouping and hiding navbar contents by a parent breakpoint.
     * @type boolean
     * @default false
     */
    readonly navbar: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    /**
     * @ignore
     */
    readonly duration: import("@angular/core").InputSignal<string>;
    /**
     * @ignore
     */
    readonly transition: import("@angular/core").InputSignal<string>;
    /**
     * Event emitted on visibility change. [docs]
     * @type string
     */
    readonly collapseChange: import("@angular/core").OutputEmitterRef<string>;
    readonly hostClasses: import("@angular/core").Signal<Record<string, boolean>>;
    ngOnDestroy(): void;
    toggle(visible?: boolean): void;
    destroyPlayer(): void;
    createPlayer(visible?: boolean): void;
    setMaxSize(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CollapseDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CollapseDirective, "[cCollapse]", ["cCollapse"], { "animateInput": { "alias": "animate"; "required": false; "isSignal": true; }; "horizontal": { "alias": "horizontal"; "required": false; "isSignal": true; }; "visibleInput": { "alias": "visible"; "required": false; "isSignal": true; }; "navbar": { "alias": "navbar"; "required": false; "isSignal": true; }; "duration": { "alias": "duration"; "required": false; "isSignal": true; }; "transition": { "alias": "transition"; "required": false; "isSignal": true; }; }, { "visibleChange": "visibleChange"; "collapseChange": "collapseChange"; }, never, never, true, never>;
}
