import { booleanAttribute, computed, Directive, effect, ElementRef, inject, input, output, Renderer2, signal } from '@angular/core';
import { AnimationBuilder, useAnimation } from '@angular/animations';
import { collapseAnimation, collapseHorizontalAnimation, expandAnimation, expandHorizontalAnimation } from './collapse.animations';
import * as i0 from "@angular/core";
export class CollapseDirective {
    constructor() {
        this.#hostElement = inject(ElementRef);
        this.#renderer = inject(Renderer2);
        this.#animationBuilder = inject(AnimationBuilder);
        this.#player = undefined;
        /**
         * @ignore
         */
        this.animateInput = input(true, { transform: booleanAttribute, alias: 'animate' });
        this.animate = signal(true);
        this.animateInputEffect = effect(() => {
            this.animate.set(this.animateInput());
        }, { allowSignalWrites: true });
        /**
         * Set horizontal collapsing to transition the width instead of height.
         * @type boolean
         * @default false
         */
        this.horizontal = input(false, { transform: booleanAttribute });
        /**
         * Toggle the visibility of collapsible element.
         * @type boolean
         * @default false
         */
        this.visibleInput = input(false, { transform: booleanAttribute, alias: 'visible' });
        this.visibleChange = output();
        this.visibleInputEffect = effect(() => {
            this.visible.set(this.visibleInput());
        }, { allowSignalWrites: true });
        this.visible = signal(false);
        this.#init = false;
        this.visibleEffect = effect(() => {
            const visible = this.visible();
            (this.#init || visible) && this.createPlayer(visible);
            this.#init = true;
        }, { allowSignalWrites: true });
        /**
         * Add `navbar` prop for grouping and hiding navbar contents by a parent breakpoint.
         * @type boolean
         * @default false
         */
        this.navbar = input(false, { transform: booleanAttribute });
        /**
         * @ignore
         */
        this.duration = input('350ms');
        /**
         * @ignore
         */
        this.transition = input('ease');
        /**
         * Event emitted on visibility change. [docs]
         * @type string
         */
        this.collapseChange = output();
        this.hostClasses = computed(() => {
            return {
                'navbar-collapse': this.navbar(),
                'collapse-horizontal': this.horizontal()
            };
        });
    }
    #hostElement;
    #renderer;
    #animationBuilder;
    #player;
    #init;
    ngOnDestroy() {
        this.destroyPlayer();
    }
    toggle(visible = !this.visible()) {
        this.visible.set(visible);
    }
    destroyPlayer() {
        this.#player?.destroy();
        this.#player = undefined;
    }
    createPlayer(visible = this.visible()) {
        if (this.#player?.hasStarted()) {
            this.destroyPlayer();
        }
        const host = this.#hostElement.nativeElement;
        if (visible) {
            this.#renderer.removeStyle(host, 'display');
        }
        const duration = this.animate() ? this.duration() : '0ms';
        const expand = this.horizontal() ? expandHorizontalAnimation : expandAnimation;
        const collapse = this.horizontal() ? collapseHorizontalAnimation : collapseAnimation;
        const dimension = this.horizontal() ? 'width' : 'height';
        const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
        const scrollSize = `scroll${capitalizedDimension}`;
        const animationFactory = this.#animationBuilder?.build(useAnimation(visible ? expand : collapse, { params: { time: duration, easing: this.transition() } }));
        this.#player = animationFactory.create(host);
        !visible && host.offsetHeight && host.style[dimension] && host.scrollHeight;
        this.#renderer.setStyle(host, dimension, visible ? 0 : `${host.getBoundingClientRect()[dimension]}px`);
        this.#player.onStart(() => {
            this.setMaxSize();
            this.#renderer.removeClass(host, 'collapse');
            this.#renderer.addClass(host, 'collapsing');
            this.#renderer.removeClass(host, 'show');
            this.#renderer.setStyle(host, dimension, visible ? `${host[scrollSize]}px` : '');
            this.collapseChange?.emit(visible ? 'opening' : 'collapsing');
        });
        this.#player.onDone(() => {
            this.#renderer.removeClass(host, 'collapsing');
            this.#renderer.addClass(host, 'collapse');
            if (visible) {
                this.#renderer.addClass(host, 'show');
                this.#renderer.setStyle(host, dimension, '');
            }
            else {
                this.#renderer.removeClass(host, 'show');
            }
            this.collapseChange?.emit(visible ? 'open' : 'collapsed');
            this.destroyPlayer();
            this.visibleChange.emit(visible);
        });
        this.#player?.play();
    }
    setMaxSize() {
        const host = this.#hostElement.nativeElement;
        if (this.horizontal()) {
            host.scrollWidth > 0 && this.#renderer.setStyle(host, 'maxWidth', `${host.scrollWidth}px`);
            // } else {
            //   host.scrollHeight > 0 && this.#renderer.setStyle(host, 'maxHeight', `${host.scrollHeight}px`);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: CollapseDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.9", type: CollapseDirective, isStandalone: true, selector: "[cCollapse]", inputs: { animateInput: { classPropertyName: "animateInput", publicName: "animate", isSignal: true, isRequired: false, transformFunction: null }, horizontal: { classPropertyName: "horizontal", publicName: "horizontal", isSignal: true, isRequired: false, transformFunction: null }, visibleInput: { classPropertyName: "visibleInput", publicName: "visible", isSignal: true, isRequired: false, transformFunction: null }, navbar: { classPropertyName: "navbar", publicName: "navbar", isSignal: true, isRequired: false, transformFunction: null }, duration: { classPropertyName: "duration", publicName: "duration", isSignal: true, isRequired: false, transformFunction: null }, transition: { classPropertyName: "transition", publicName: "transition", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { visibleChange: "visibleChange", collapseChange: "collapseChange" }, host: { properties: { "class": "hostClasses()", "style": "{display: \"none\"}" } }, exportAs: ["cCollapse"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: CollapseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[cCollapse]',
                    exportAs: 'cCollapse',
                    standalone: true,
                    host: { '[class]': 'hostClasses()', '[style]': '{display: "none"}' }
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,