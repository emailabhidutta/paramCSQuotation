import { booleanAttribute, computed, Directive, effect, ElementRef, inject, Input, numberAttribute, Renderer2, signal } from '@angular/core';
import * as i0 from "@angular/core";
export class ProgressBarDirective {
    constructor() {
        this.#renderer = inject(Renderer2);
        this.#hostElement = inject(ElementRef);
        this.#max = signal(100);
        this.#min = 0;
        this.#value = signal(undefined);
        this.#width = signal(undefined);
        this.percent = computed(() => {
            return +((((this.#value() ?? this.#width() ?? 0) - this.#min) / (this.#max() - this.#min)) * 100).toFixed(this.precision);
        });
        this.#valuesEffect = effect(() => {
            const host = this.#hostElement.nativeElement;
            if (this.#value() === undefined || this.#width()) {
                for (const name of ['aria-valuenow', 'aria-valuemax', 'aria-valuemin', 'role']) {
                    this.#renderer.removeAttribute(host, name);
                }
            }
            else {
                this.#renderer.setAttribute(host, 'aria-valuenow', String(this.#value()));
                this.#renderer.setAttribute(host, 'aria-valuemin', String(this.#min));
                this.#renderer.setAttribute(host, 'aria-valuemax', String(this.#max()));
                this.#renderer.setAttribute(host, 'role', this.role);
            }
            const tagName = host.tagName;
            if (this.percent() >= 0 &&
                ((this.stacked && tagName === 'C-PROGRESS') || (!this.stacked && tagName !== 'C-PROGRESS'))) {
                this.#renderer.setStyle(host, 'width', `${this.percent()}%`);
            }
            else {
                this.#renderer.removeStyle(host, 'width');
            }
        });
        // TODO: check if this is necessary.
        this.precision = 0;
        /**
         * Stacked ProgressBars.
         * @type boolean
         * @default false
         */
        this.stacked = false;
        /**
         * Set default html role attribute.
         * @type string
         */
        this.role = 'progressbar';
    }
    #renderer;
    #hostElement;
    #max;
    #min;
    #value;
    #width;
    #valuesEffect;
    /**
     * The percent value the ProgressBar.
     * @type number
     * @default 0
     */
    set value(value) {
        this.#value.set(value);
    }
    get value() {
        return this.#value();
    }
    set width(value) {
        this.#width.set(value);
    }
    /**
     * The max value of the ProgressBar.
     * @type number
     * @default 100
     */
    set max(max) {
        this.#max.set(isNaN(max) || max <= 0 ? 100 : max);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: ProgressBarDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "18.2.9", type: ProgressBarDirective, isStandalone: true, selector: "[cProgressBar]", inputs: { animated: ["animated", "animated", booleanAttribute], color: "color", precision: ["precision", "precision", numberAttribute], value: ["value", "value", numberAttribute], width: ["width", "width", numberAttribute], variant: "variant", max: ["max", "max", numberAttribute], stacked: ["stacked", "stacked", booleanAttribute], role: "role" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: ProgressBarDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[cProgressBar]',
                    standalone: true
                }]
        }], propDecorators: { animated: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], color: [{
                type: Input
            }], precision: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], value: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], width: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], variant: [{
                type: Input
            }], max: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], stacked: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], role: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,