import { afterRender, Component, computed, contentChild, ElementRef, inject, input, signal } from '@angular/core';
import { DOCUMENT, NgClass, NgTemplateOutlet } from '@angular/common';
import { BreakpointObserver } from '@angular/cdk/layout';
import { CollapseDirective } from '../collapse';
import { ThemeDirective } from '../shared';
import * as i0 from "@angular/core";
import * as i1 from "../shared/theme.directive";
// todo: fix container prop issue not rendering children
// todo: workaround -  use <c-container> component directly in template
export class NavbarComponent {
    constructor() {
        this.#breakpointObserver = inject(BreakpointObserver);
        this.#document = inject(DOCUMENT);
        this.#hostElement = inject(ElementRef);
        /**
         * Sets the color context of the component to one of CoreUI’s themed colors.
         * @type Colors
         */
        this.color = input();
        /**
         * Defines optional container wrapping children elements.
         */
        this.container = input();
        /**
         * Defines the responsive breakpoint to determine when content collapses.
         */
        this.expand = input();
        /**
         * Place component in non-static positions.
         */
        this.placement = input();
        this.role = input('navigation');
        this.collapse = contentChild(CollapseDirective);
        this.hostClasses = computed(() => {
            const color = this.color();
            const expand = this.expand();
            const expandClassSuffix = expand === true ? '' : `-${expand}`;
            const placement = this.placement();
            return {
                navbar: true,
                [`navbar-expand${expandClassSuffix}`]: !!expand,
                [`bg-${color}`]: !!color,
                [`${placement}`]: !!placement
            };
        });
        this.containerClass = computed(() => {
            const container = this.container();
            return `container${container !== true ? '-' + container : ''}`;
        });
        this.computedStyle = signal('');
        this.afterNextRenderFn = afterRender({
            read: () => {
                const expand = this.expand();
                if (typeof expand === 'string') {
                    const computedStyle = this.#document.defaultView
                        ?.getComputedStyle(this.#hostElement.nativeElement)
                        ?.getPropertyValue(`--cui-breakpoint-${expand}`) ?? false;
                    computedStyle && this.computedStyle.set(computedStyle);
                }
            }
        });
        this.breakpoint = computed(() => {
            const expand = this.expand();
            if (typeof expand === 'string') {
                return this.computedStyle();
            }
            return false;
        });
    }
    #breakpointObserver;
    #document;
    #hostElement;
    #observer;
    ngAfterContentInit() {
        const breakpoint = this.breakpoint();
        if (breakpoint) {
            const onBreakpoint = `(min-width: ${breakpoint})`;
            this.#observer = this.#breakpointObserver
                .observe([onBreakpoint])
                .pipe()
                .subscribe((result) => {
                const collapse = this.collapse();
                if (collapse) {
                    const animate = collapse.animate();
                    collapse.animate.set(false);
                    collapse.toggle(false);
                    setTimeout(() => {
                        collapse.toggle(result.matches);
                        setTimeout(() => {
                            collapse.animate.set(animate);
                        });
                    });
                }
            });
        }
    }
    ngOnDestroy() {
        this.#observer?.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: NavbarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.2.0", version: "18.2.9", type: NavbarComponent, isStandalone: true, selector: "c-navbar", inputs: { color: { classPropertyName: "color", publicName: "color", isSignal: true, isRequired: false, transformFunction: null }, container: { classPropertyName: "container", publicName: "container", isSignal: true, isRequired: false, transformFunction: null }, expand: { classPropertyName: "expand", publicName: "expand", isSignal: true, isRequired: false, transformFunction: null }, placement: { classPropertyName: "placement", publicName: "placement", isSignal: true, isRequired: false, transformFunction: null }, role: { classPropertyName: "role", publicName: "role", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "class": "hostClasses()", "attr.role": "role()" } }, queries: [{ propertyName: "collapse", first: true, predicate: CollapseDirective, descendants: true, isSignal: true }], hostDirectives: [{ directive: i1.ThemeDirective, inputs: ["colorScheme", "colorScheme"] }], ngImport: i0, template: "<ng-container *ngTemplateOutlet=\"container() ? withContainerTemplate : noContainerTemplate\" />\n\n<ng-template #withContainerTemplate>\n  <div [ngClass]=\"containerClass()\">\n    <ng-content />\n  </div>\n</ng-template>\n\n<ng-template #noContainerTemplate>\n  <ng-content />\n</ng-template>\n", dependencies: [{ kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: NavbarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c-navbar', standalone: true, imports: [NgClass, NgTemplateOutlet], hostDirectives: [{ directive: ThemeDirective, inputs: ['colorScheme'] }], host: { '[class]': 'hostClasses()', '[attr.role]': 'role()' }, template: "<ng-container *ngTemplateOutlet=\"container() ? withContainerTemplate : noContainerTemplate\" />\n\n<ng-template #withContainerTemplate>\n  <div [ngClass]=\"containerClass()\">\n    <ng-content />\n  </div>\n</ng-template>\n\n<ng-template #noContainerTemplate>\n  <ng-content />\n</ng-template>\n" }]
        }] });
//# sourceMappingURL=data:application/json;base64,