import { booleanAttribute, Component, computed, effect, inject, input } from '@angular/core';
import { AccordionService } from '../accordion.service';
import * as i0 from "@angular/core";
export class AccordionComponent {
    constructor() {
        this.#accordionService = inject(AccordionService);
        /**
         * Removes the default background-color, some borders, and some rounded corners to render accordions edge-to-edge with their parent container.
         * @type boolean
         */
        this.flush = input(false, { transform: booleanAttribute });
        /**
         * Make accordion items stay open when another item is opened
         * @type boolean
         */
        this.alwaysOpen = input(false, { transform: booleanAttribute });
        this.#alwaysOpenEffect = effect(() => {
            this.#accordionService.alwaysOpen = this.alwaysOpen();
        });
        this.hostClasses = computed(() => ({
            accordion: true,
            'accordion-flush': this.flush()
        }));
    }
    #accordionService;
    #alwaysOpenEffect;
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: AccordionComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "18.2.9", type: AccordionComponent, isStandalone: true, selector: "c-accordion", inputs: { flush: { classPropertyName: "flush", publicName: "flush", isSignal: true, isRequired: false, transformFunction: null }, alwaysOpen: { classPropertyName: "alwaysOpen", publicName: "alwaysOpen", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "class": "hostClasses()" } }, providers: [AccordionService], exportAs: ["cAccordionItem"], ngImport: i0, template: '<ng-content />', isInline: true, styles: [":host{display:block}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: AccordionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c-accordion', template: '<ng-content />', exportAs: 'cAccordionItem', providers: [AccordionService], standalone: true, host: { '[class]': 'hostClasses()' }, styles: [":host{display:block}\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvYWNjb3JkaW9uL2FjY29yZGlvbi9hY2NvcmRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDOztBQVd4RCxNQUFNLE9BQU8sa0JBQWtCO0lBVC9CO1FBVVcsc0JBQWlCLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFdEQ7OztXQUdHO1FBQ00sVUFBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1FBRS9EOzs7V0FHRztRQUNNLGVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztRQUUzRCxzQkFBaUIsR0FBRyxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3hELENBQUMsQ0FBQyxDQUFDO1FBRU0sZ0JBQVcsR0FBRyxRQUFRLENBQTBCLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDOUQsU0FBUyxFQUFFLElBQUk7WUFDZixpQkFBaUIsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFO1NBQ2hDLENBQUMsQ0FBQyxDQUFDO0tBQ0w7SUF0QlUsaUJBQWlCLENBQTRCO0lBYzdDLGlCQUFpQixDQUV2Qjs4R0FqQlEsa0JBQWtCO2tHQUFsQixrQkFBa0IseVhBSmxCLENBQUMsZ0JBQWdCLENBQUMsd0RBSG5CLGdCQUFnQjs7MkZBT2Ysa0JBQWtCO2tCQVQ5QixTQUFTOytCQUNFLGFBQWEsWUFDYixnQkFBZ0IsWUFFaEIsZ0JBQWdCLGFBQ2YsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUNqQixJQUFJLFFBQ1YsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYm9vbGVhbkF0dHJpYnV0ZSwgQ29tcG9uZW50LCBjb21wdXRlZCwgZWZmZWN0LCBpbmplY3QsIGlucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEFjY29yZGlvblNlcnZpY2UgfSBmcm9tICcuLi9hY2NvcmRpb24uc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2MtYWNjb3JkaW9uJyxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudCAvPicsXG4gIHN0eWxlVXJsczogWycuL2FjY29yZGlvbi5jb21wb25lbnQuc2NzcyddLFxuICBleHBvcnRBczogJ2NBY2NvcmRpb25JdGVtJyxcbiAgcHJvdmlkZXJzOiBbQWNjb3JkaW9uU2VydmljZV0sXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGhvc3Q6IHsgJ1tjbGFzc10nOiAnaG9zdENsYXNzZXMoKScgfVxufSlcbmV4cG9ydCBjbGFzcyBBY2NvcmRpb25Db21wb25lbnQge1xuICByZWFkb25seSAjYWNjb3JkaW9uU2VydmljZSA9IGluamVjdChBY2NvcmRpb25TZXJ2aWNlKTtcblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgZGVmYXVsdCBiYWNrZ3JvdW5kLWNvbG9yLCBzb21lIGJvcmRlcnMsIGFuZCBzb21lIHJvdW5kZWQgY29ybmVycyB0byByZW5kZXIgYWNjb3JkaW9ucyBlZGdlLXRvLWVkZ2Ugd2l0aCB0aGVpciBwYXJlbnQgY29udGFpbmVyLlxuICAgKiBAdHlwZSBib29sZWFuXG4gICAqL1xuICByZWFkb25seSBmbHVzaCA9IGlucHV0KGZhbHNlLCB7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KTtcblxuICAvKipcbiAgICogTWFrZSBhY2NvcmRpb24gaXRlbXMgc3RheSBvcGVuIHdoZW4gYW5vdGhlciBpdGVtIGlzIG9wZW5lZFxuICAgKiBAdHlwZSBib29sZWFuXG4gICAqL1xuICByZWFkb25seSBhbHdheXNPcGVuID0gaW5wdXQoZmFsc2UsIHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pO1xuXG4gIHJlYWRvbmx5ICNhbHdheXNPcGVuRWZmZWN0ID0gZWZmZWN0KCgpID0+IHtcbiAgICB0aGlzLiNhY2NvcmRpb25TZXJ2aWNlLmFsd2F5c09wZW4gPSB0aGlzLmFsd2F5c09wZW4oKTtcbiAgfSk7XG5cbiAgcmVhZG9ubHkgaG9zdENsYXNzZXMgPSBjb21wdXRlZDxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oKCkgPT4gKHtcbiAgICBhY2NvcmRpb246IHRydWUsXG4gICAgJ2FjY29yZGlvbi1mbHVzaCc6IHRoaXMuZmx1c2goKVxuICB9KSk7XG59XG4iXX0=