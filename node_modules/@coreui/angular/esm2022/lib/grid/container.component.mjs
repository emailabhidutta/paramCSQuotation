import { booleanAttribute, Component, computed, input } from '@angular/core';
import * as i0 from "@angular/core";
export class ContainerComponent {
    constructor() {
        /**
         * Set container 100% wide until a breakpoint.
         */
        this.breakpoint = input('');
        /**
         * Set container 100% wide, spanning the entire width of the viewport.
         * @type InputSignalWithTransform<unknown, boolean>
         */
        this.fluid = input(false, {
            transform: booleanAttribute
        });
        this.hostClasses = computed(() => {
            const breakpoint = this.breakpoint();
            const fluid = this.fluid();
            return {
                container: !fluid && !breakpoint,
                'container-fluid': !!fluid,
                [`container-${breakpoint}`]: !!breakpoint
            };
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: ContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "18.2.9", type: ContainerComponent, isStandalone: true, selector: "c-container, [cContainer]", inputs: { breakpoint: { classPropertyName: "breakpoint", publicName: "breakpoint", isSignal: true, isRequired: false, transformFunction: null }, fluid: { classPropertyName: "fluid", publicName: "fluid", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "class": "hostClasses()" } }, ngImport: i0, template: '<ng-content />', isInline: true, styles: [":host{display:block}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: ContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c-container, [cContainer]', template: '<ng-content />', standalone: true, host: { '[class]': 'hostClasses()' }, styles: [":host{display:block}\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvZ3JpZC9jb250YWluZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBeUMsTUFBTSxlQUFlLENBQUM7O0FBWXBILE1BQU0sT0FBTyxrQkFBa0I7SUFQL0I7UUFRRTs7V0FFRztRQUNNLGVBQVUsR0FBNEMsS0FBSyxDQUE2QixFQUFFLENBQUMsQ0FBQztRQUVyRzs7O1dBR0c7UUFDTSxVQUFLLEdBQStDLEtBQUssQ0FBbUIsS0FBSyxFQUFFO1lBQzFGLFNBQVMsRUFBRSxnQkFBZ0I7U0FDNUIsQ0FBQyxDQUFDO1FBRU0sZ0JBQVcsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFO1lBQ25DLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNyQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDM0IsT0FBTztnQkFDTCxTQUFTLEVBQUUsQ0FBQyxLQUFLLElBQUksQ0FBQyxVQUFVO2dCQUNoQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsS0FBSztnQkFDMUIsQ0FBQyxhQUFhLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVU7YUFDZixDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0tBQ0o7OEdBdkJZLGtCQUFrQjtrR0FBbEIsa0JBQWtCLG9aQUxuQixnQkFBZ0I7OzJGQUtmLGtCQUFrQjtrQkFQOUIsU0FBUzsrQkFDRSwyQkFBMkIsWUFDM0IsZ0JBQWdCLGNBRWQsSUFBSSxRQUNWLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJvb2xlYW5BdHRyaWJ1dGUsIENvbXBvbmVudCwgY29tcHV0ZWQsIGlucHV0LCBJbnB1dFNpZ25hbCwgSW5wdXRTaWduYWxXaXRoVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IElDb250YWluZXIgfSBmcm9tICcuL2NvbnRhaW5lci50eXBlJztcbmltcG9ydCB7IEJyZWFrcG9pbnRzIH0gZnJvbSAnLi4vY29yZXVpLnR5cGVzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYy1jb250YWluZXIsIFtjQ29udGFpbmVyXScsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQgLz4nLFxuICBzdHlsZVVybHM6IFsnLi9jb250YWluZXIuY29tcG9uZW50LnNjc3MnXSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaG9zdDogeyAnW2NsYXNzXSc6ICdob3N0Q2xhc3NlcygpJyB9XG59KVxuZXhwb3J0IGNsYXNzIENvbnRhaW5lckNvbXBvbmVudCBpbXBsZW1lbnRzIElDb250YWluZXIge1xuICAvKipcbiAgICogU2V0IGNvbnRhaW5lciAxMDAlIHdpZGUgdW50aWwgYSBicmVha3BvaW50LlxuICAgKi9cbiAgcmVhZG9ubHkgYnJlYWtwb2ludDogSW5wdXRTaWduYWw8RXhjbHVkZTxCcmVha3BvaW50cywgJ3hzJz4+ID0gaW5wdXQ8RXhjbHVkZTxCcmVha3BvaW50cywgJ3hzJz4+KCcnKTtcblxuICAvKipcbiAgICogU2V0IGNvbnRhaW5lciAxMDAlIHdpZGUsIHNwYW5uaW5nIHRoZSBlbnRpcmUgd2lkdGggb2YgdGhlIHZpZXdwb3J0LlxuICAgKiBAdHlwZSBJbnB1dFNpZ25hbFdpdGhUcmFuc2Zvcm08dW5rbm93biwgYm9vbGVhbj5cbiAgICovXG4gIHJlYWRvbmx5IGZsdWlkOiBJbnB1dFNpZ25hbFdpdGhUcmFuc2Zvcm08dW5rbm93biwgYm9vbGVhbj4gPSBpbnB1dDx1bmtub3duLCBib29sZWFuPihmYWxzZSwge1xuICAgIHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZVxuICB9KTtcblxuICByZWFkb25seSBob3N0Q2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBicmVha3BvaW50ID0gdGhpcy5icmVha3BvaW50KCk7XG4gICAgY29uc3QgZmx1aWQgPSB0aGlzLmZsdWlkKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRhaW5lcjogIWZsdWlkICYmICFicmVha3BvaW50LFxuICAgICAgJ2NvbnRhaW5lci1mbHVpZCc6ICEhZmx1aWQsXG4gICAgICBbYGNvbnRhaW5lci0ke2JyZWFrcG9pbnR9YF06ICEhYnJlYWtwb2ludFxuICAgIH0gYXMgUmVjb3JkPHN0cmluZywgYm9vbGVhbj47XG4gIH0pO1xufVxuIl19