import { AfterContentInit, OnDestroy } from '@angular/core';
import { CollapseDirective } from '../collapse';
import * as i0 from "@angular/core";
import * as i1 from "../shared/theme.directive";
export declare class NavbarComponent implements AfterContentInit, OnDestroy {
    #private;
    /**
     * Sets the color context of the component to one of CoreUI’s themed colors.
     * @type Colors
     */
    readonly color: import("@angular/core").InputSignal<string | undefined>;
    /**
     * Defines optional container wrapping children elements.
     */
    readonly container: import("@angular/core").InputSignal<boolean | "sm" | "md" | "lg" | "xl" | "xxl" | "fluid" | undefined>;
    /**
     * Defines the responsive breakpoint to determine when content collapses.
     */
    readonly expand: import("@angular/core").InputSignal<boolean | "sm" | "md" | "lg" | "xl" | "xxl" | undefined>;
    /**
     * Place component in non-static positions.
     */
    readonly placement: import("@angular/core").InputSignal<"fixed-top" | "fixed-bottom" | "sticky-top" | undefined>;
    readonly role: import("@angular/core").InputSignal<string>;
    readonly collapse: import("@angular/core").Signal<CollapseDirective | undefined>;
    readonly hostClasses: import("@angular/core").Signal<Record<string, boolean>>;
    readonly containerClass: import("@angular/core").Signal<string>;
    readonly computedStyle: import("@angular/core").WritableSignal<string>;
    readonly afterNextRenderFn: import("@angular/core").AfterRenderRef;
    readonly breakpoint: import("@angular/core").Signal<string | false>;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NavbarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NavbarComponent, "c-navbar", never, { "color": { "alias": "color"; "required": false; "isSignal": true; }; "container": { "alias": "container"; "required": false; "isSignal": true; }; "expand": { "alias": "expand"; "required": false; "isSignal": true; }; "placement": { "alias": "placement"; "required": false; "isSignal": true; }; "role": { "alias": "role"; "required": false; "isSignal": true; }; }, {}, ["collapse"], ["*", "*"], true, [{ directive: typeof i1.ThemeDirective; inputs: { "colorScheme": "colorScheme"; }; outputs: {}; }]>;
}
